.. _pattern-infra:

인프라 구성 패턴
******************

이 장에서는 백엔드에서 손쉽게 자원들을 연결/관리하는 패턴에 대해 설명한다.
서비스 패러다임이 모놀리틱(Monolithic)에서 마이크로서비스(Microservice)로 변화하면서 통합은 더 어려워졌다.
인프라 자원들의 유연한 결합을 통해 가용량과 확장성을 손쉽게 확보한다.



콘텐츠 체인
====================================

해결하고 싶은 문제
------------------------------------
물리적으로 분산된 콘텐츠는 사용성이 매우 떨어진다. 
스토리지 마이그레이션이나 추가 개발 없이 콘텐츠 위치투명성을 확보하고 싶다.


솔루션/패턴 설명
------------------------------------
``STON`` 의 `가상호스트 링크 <https://ston.readthedocs.io/ko/latest/admin/adv_vhost.html#adv-vhost-link>`_ 기능을 이용해 물리적으로 분리된 엔드포인트를 연결한다.

.. figure:: img/dgm008.png
   :align: center


구현
------------------------------------
-  메인 스토리지/서비스 앞에 ``STON`` 을 배치한다.
-  ``STON`` 개별 가상호스트를 생성하고 가상호스트 링크이미지툴 기능을 활성화한다. ::
   
      # vhosts.xml - <Vhosts>

      // foo.com에 없는(=404 Not Found) 콘텐츠는 bar.com에서 서비스한다.
      <Vhost Name="foo.com">
         <VhostLink Condition="404">bar.com</VhostLink>

         ... (생략) ...
      </Vhost>

      <Vhost Name="bar.com">
         ... (생략) ...
      </Vhost>


장점/효과
------------------------------------
스토리지 마이그레이션이나 코드 수정없이 콘텐츠를 유연하게 연결할 수 있다. 
향후 별도의 스토리지나 외부 서비스를 연결해야 하는 경우에도 손쉽게 확장이 가능하다.


주의점
------------------------------------
`가상호스트 링크 <https://ston.readthedocs.io/ko/latest/admin/adv_vhost.html#adv-vhost-link>`_  는 아래의 경우 중단된다.

-  대상 가상호스트가 존재하지 않는 경우 (foo.com -> ?)
-  자기 자신을 대상 가상호스트로 지정한 경우 (foo.com -> foo.com)
-  재귀링크(Recursive Link)가 발생한 경우 (foo.com -> bar.com -> foo.com)


기타
------------------------------------
폴백(Fallback) 스토리지의 콘텐츠를 캐싱하면 외부 종속성으로 인한 성능저하를 방지할 수 있다.




콘텐츠 체인
====================================

해결하고 싶은 문제
------------------------------------
서비스

콘텐츠가 여러 엔드포인트에 원본에 분산되어 있다면, 가상호스트 링크를 활용하여 콘텐츠가 통합되어 있는 것처럼 서비스가 가능하다. 특히 On-Premise에서 클라우드로 스토리지를 마이그레이션하거나, 스토리지의 용량, 비용 등의 이유로 콘텐츠가 분산되어 있는 환경에서 유용하다.



솔루션/패턴 설명
------------------------------------
이미지 요청시 가공 형태를 URL에 명시한다.

.. figure:: img/dgm009.png
   :align: center

``STON`` 을 통해 원본 이미지를 원하는 형태로 실시간 가공하여 전달한다.


구현
------------------------------------
-  이미지 스토리지 앞에 이미지 변환서버 용도의 ``STON`` 을 배치한다.
-  ``STON`` 개별 가상호스트를 생성하고 가상호스트 링크이미지툴 기능을 활성화한다. ::
   
      # vhosts.xml - <Vhosts>

      // foo.com에 없는(=404 Not Found) 콘텐츠는 bar.com에서 서비스한다.
      <Vhost Name="foo.com">
         <VhostLink Condition="404">bar.com</VhostLink>
      </Vhost>


-  원본 이미지 URL 뒤에 원하는 가공옵션을 붙여 호출한다. ::

      http://image.example.com/origin.jpg/dims/resize/500x500/optimize



장점/효과
------------------------------------
-  원본 이미지 1장만 있다면 어떠한 이미지라도 실시간으로 만들 수 있다.
-  백엔드의 이미지 가공 시스템이 불필요해진다.


주의점
------------------------------------
``STON`` 최대 처리가능 이미지 용량(기본 10MB)을 넘거나 비정상 원본이라면 가공하지 않고 원본을 전송한다.


기타
------------------------------------
이미 사용중인 URL 패턴이 있다면 ``STON`` 커스터마이징 모듈을 통해 호환성을 확보한다.


